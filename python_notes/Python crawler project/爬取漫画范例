from selenium import webdriver
from selenium.webdriver.edge.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from bs4 import BeautifulSoup
import time
import os
import requests

# 无头模式配置（静默运行）
edge_options = Options()
edge_options.add_argument('--headless')
edge_options.add_argument('--disable-gpu')
edge_options.add_argument("user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36")


# 启动浏览器
driver = webdriver.Edge(options=edge_options)

def get_latest_chapter(comic_id=533395):  # 妖神记ID
    """获取最新章节链接及标题"""
    main_url = f"http://ac.qq.com/Comic/comicInfo/id/533395"
    driver.get(main_url)
    WebDriverWait(driver, 15).until(
        EC.presence_of_element_located((By.CSS_SELECTOR, 'ol.works-chapter-list'))
    )
    
    # 获取最新章节
    latest_chapter = driver.find_element(By.CSS_SELECTOR, 'ol.works-chapter-list > li:last-child a')
    chapter_title = latest_chapter.get_attribute('title').replace(' ', '_')
    chapter_url = latest_chapter.get_attribute('href')
    
    print(f"📖 找到最新章节: {chapter_title} - {chapter_url}")
    return chapter_title, chapter_url
    

def scroll_to_load_images():
    """模拟滚动触发图片动态加载"""
    # 等待漫画容器加载
    WebDriverWait(driver, 10).until(
        EC.presence_of_element_located((By.ID, 'comicContain'))
    )
    
    # 逐步滚动页面（每次滚动一屏高度）
    scroll_height = driver.execute_script("return document.body.scrollHeight")
    for i in range(0, scroll_height, 800):
        driver.execute_script(f"window.scrollTo(0, {i});")
        time.sleep(0.5)  # 滚动间隔防封IP

def download_images(chapter_title):
    """下载章节所有图片"""
    # 创建文件夹
    if not os.path.exists(chapter_title):
        os.makedirs(chapter_title)
    
    # 解析图片链接
    imgs = driver.find_elements(By.CSS_SELECTOR, '#comicContain li img')
    for idx, img in enumerate(imgs):
        img_url = img.get_attribute('src')  # 动态加载后src变为真实地址
        if 'gif' in img_url:  # 跳过广告占位图
            continue
        
        # 下载图片
        img_data = requests.get(img_url).content
        with open(f"{chapter_title}/{idx+1}.jpg", 'wb') as f:
            f.write(img_data)
        print(f"已下载：{chapter_title}/{idx+1}.jpg")

# 主流程
if __name__ == "__main__":
    try:
        title, url = get_latest_chapter()
        driver.get(url)              # 进入章节页
        scroll_to_load_images()      # 滚动加载图片
        download_images(title)       # 下载图片
    finally:
        driver.quit()                # 确保关闭浏览器